// Project: MajorAuthor.Web
// File: Services/IAccountService.cs
using MajorAuthor.Data;
using MajorAuthor.Models;
using Microsoft.AspNetCore.Identity;
using System.Threading.Tasks;

namespace MajorAuthor.Services
{
    /// <summary>
    /// Service for handling account-related business logic.
    /// This service is now completely independent of the MVC context.
    /// </summary>
    public interface IAccountService
    {
        Task<SignInResult> LoginWithPasswordAsync(LoginViewModel model);
        Task<ExternalLoginResult> HandleExternalLoginCallbackAsync(ExternalLoginInfo info, string returnUrl);

        /// <summary>
        /// Registers a new user and sends an email confirmation.
        /// </summary>
        /// <param name="model">The registration view model.</param>
        /// <param name="callbackUrl">The URL for email confirmation, generated by the controller.</param>
        /// <returns>A tuple containing the identity result and the created user.</returns>
        Task<(IdentityResult, ApplicationUser)> RegisterAndSendConfirmationAsync(RegisterViewModel model, string callbackUrl);

        /// <summary>
        /// Confirms a user's email address.
        /// </summary>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="code">The confirmation token.</param>
        /// <returns>The identity result of the operation.</returns>
        Task<IdentityResult> ConfirmEmailAsync(string userId, string code);

        /// <summary>
        /// Resends the email confirmation.
        /// </summary>
        /// <param name="model">The view model containing the user's email.</param>
        /// <param name="callbackUrl">The URL for email confirmation, generated by the controller.</param>
        Task<bool> ResendEmailConfirmationAsync(ResendEmailConfirmationViewModel model, string callbackUrl);

        /// <summary>
        /// Sends a password reset email.
        /// </summary>
        /// <param name="model">The view model containing the user's email.</param>
        /// <param name="callbackUrl">The URL for password reset, generated by the controller.</param>
        Task<bool> ForgotPasswordAsync(ForgotPasswordViewModel model, string callbackUrl);

        Task<IdentityResult> ResetPasswordAsync(ResetPasswordViewModel model);
        Task<IdentityResult> ConfirmExternalLoginAsync(ExternalLoginInfo info, ExternalLoginConfirmationViewModel model);
    }

    public enum ExternalLoginResult
    {
        Succeeded,
        RequiresConfirmation,
        LoginAlreadyAssociated,
        LoginFailed,
        Lockout
    }
}
