@model MajorAuthor.Models.MyWorksViewModel

@{
    ViewData["Title"] = "Мои Произведения";
}

<style>
    .message-box {
        opacity: 0;
        transition: opacity 0.5s ease-in-out;
    }

        .message-box.show {
            opacity: 1;
        }

</style>

<div class="container mx-auto p-4 max-w-7xl">
    <h1 class="text-3xl font-bold text-center mb-8 text-gray-800">@ViewData["Title"]</h1>

    <!-- Message Box -->
    <div id="messageBox" class="message-box bg-blue-100 border border-blue-400 text-blue-700 px-4 py-3 rounded-lg relative text-center mb-6" role="alert">
        <span id="messageText" class="block sm:inline"></span>
    </div>

    @if (!Model.IsUserAuthor)
    {
        <div class="bg-blue-100 border border-blue-400 text-blue-700 px-4 py-3 rounded-lg relative text-center mb-6" role="alert">
            <span class="block sm:inline">Чтобы создавать произведения, вам нужно стать автором.</span>
        </div>
        <div class="text-center">
            <button id="registerAuthorBtn" class="bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-6 rounded-full transition duration-300 ease-in-out transform hover:scale-105 shadow-md">
                Стать автором
            </button>
        </div>
    }
    else
    {
        <!-- Main content blocks are now arranged in a responsive grid -->
        <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-8">
            <!-- Books Section -->
            <div id="booksSection" class="bg-gray-100 p-6 rounded-xl shadow-md">
                <div class="flex justify-between items-center mb-4">
                    <h2 class="text-2xl font-semibold text-gray-700">Книги</h2>
                    <a href="@Url.Action("CreateBook", "MyWorks")" class="bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-full transition duration-300">
                        Добавить книгу
                    </a>
                </div>
                @if (Model.Works.Any(w => w.Type == "Книга"))
                {
                    <ul class="space-y-3">
                        @foreach (var work in Model.Works.Where(w => w.Type == "Книга"))
                        {
                            <li class="bg-white rounded-lg p-3 shadow-sm flex justify-between items-center border border-gray-200" data-work-id="@work.Id" data-work-type="@work.Type">
                                <span class="text-lg font-medium text-gray-800">@work.Title</span>
                                <div class="space-x-2">
                                    <a href="@Url.Action("EditWork", "MyWorks", new { id = work.Id })" class="bg-gray-300 hover:bg-gray-400 text-gray-800 font-bold py-1 px-3 rounded-full text-sm">Редактировать</a>
                                    <button class="delete-btn bg-red-500 hover:bg-red-600 text-white font-bold py-1 px-3 rounded-full text-sm">Удалить</button>
                                </div>
                            </li>
                        }
                    </ul>
                }
                else
                {
                    <p class="text-gray-500 italic">Книги пока не добавлены.</p>
                }
            </div>

            <!-- Poems Section -->
            <div id="poemsSection" class="bg-gray-100 p-6 rounded-xl shadow-md">
                <div class="flex justify-between items-center mb-4">
                    <h2 class="text-2xl font-semibold text-gray-700">Стихи</h2>
                    <a href="@Url.Action("CreatePoem", "MyWorks")" class="bg-purple-600 hover:bg-purple-700 text-white font-bold py-2 px-4 rounded-full transition duration-300">
                        Добавить стихотворение
                    </a>
                </div>
                @if (Model.Works.Any(w => w.Type == "Стих"))
                {
                    <ul class="space-y-3">
                        @foreach (var work in Model.Works.Where(w => w.Type == "Стих"))
                        {
                            <li class="bg-white rounded-lg p-3 shadow-sm flex justify-between items-center border border-gray-200" data-work-id="@work.Id" data-work-type="@work.Type">
                                <span class="text-lg font-medium text-gray-800">@work.Title</span>
                                <div class="space-x-2">
                                    <a href="@Url.Action("EditWork", "MyWorks", new { id = work.Id })" class="bg-gray-300 hover:bg-gray-400 text-gray-800 font-bold py-1 px-3 rounded-full text-sm">Редактировать</a>
                                    <button class="delete-btn bg-red-500 hover:bg-red-600 text-white font-bold py-1 px-3 rounded-full text-sm">Удалить</button>
                                </div>
                            </li>
                        }
                    </ul>
                }
                else
                {
                    <p class="text-gray-500 italic">Стихи пока не добавлены.</p>
                }
            </div>

            <!-- Blogs Section -->
            <div id="blogsSection" class="bg-gray-100 p-6 rounded-xl shadow-md">
                <div class="flex justify-between items-center mb-4">
                    <h2 class="text-2xl font-semibold text-gray-700">Блоги</h2>
                    <a href="@Url.Action("CreateBlog", "MyWorks")" class="bg-green-600 hover:bg-green-700 text-white font-bold py-2 px-4 rounded-full transition duration-300">
                        Добавить блог
                    </a>
                </div>
                @if (Model.Works.Any(w => w.Type == "Блог"))
                {
                    <ul class="space-y-3">
                        @foreach (var work in Model.Works.Where(w => w.Type == "Блог"))
                        {
                            <li class="bg-white rounded-lg p-3 shadow-sm flex justify-between items-center border border-gray-200" data-work-id="@work.Id" data-work-type="@work.Type">
                                <span class="text-lg font-medium text-gray-800">@work.Title</span>
                                <div class="space-x-2">
                                    <a href="@Url.Action("EditWork", "MyWorks", new { id = work.Id })" class="bg-gray-300 hover:bg-gray-400 text-gray-800 font-bold py-1 px-3 rounded-full text-sm">Редактировать</a>
                                    <button class="delete-btn bg-red-500 hover:bg-red-600 text-white font-bold py-1 px-3 rounded-full text-sm">Удалить</button>
                                </div>
                            </li>
                        }
                    </ul>
                }
                else
                {
                    <p class="text-gray-500 italic">Блоги пока не добавлены.</p>
                }
            </div>
        </div>
    }

</div>

<!-- Модальное окно для регистрации автора -->

<div id="registerAuthorModal" class="fixed inset-0 z-50 hidden overflow-y-auto" aria-labelledby="modal-title" role="dialog" aria-modal="true">
    <div class="flex items-center justify-center min-h-screen px-4 py-10 sm:p-0">
        <div class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" aria-hidden="true"></div>
        <div class="bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:max-w-lg sm:w-full">
            <div class="bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
                <div class="sm:flex sm:items-start">
                    <div class="mt-3 text-center sm:mt-0 sm:text-left w-full">
                        <h3 class="text-lg leading-6 font-medium text-gray-900" id="modal-title">
                            Стать автором
                        </h3>
                        <div class="mt-2">
                            <p class="text-sm text-gray-500 mb-4">
                                Чтобы зарегистрироваться как автор, пожалуйста, введите ваше имя или псевдоним.
                            </p>
                            <input type="text" id="penNameInput" class="shadow-sm focus:ring-blue-500 focus:border-blue-500 block w-full sm:text-sm border-gray-300 rounded-md" placeholder="Имя или псевдоним">
                        </div>
                    </div>
                </div>
            </div>
            <div class="bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse">
                <button type="button" id="submitPenNameBtn" class="w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-blue-600 text-base font-medium text-white hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 sm:ml-3 sm:w-auto sm:text-sm">
                    Подтвердить
                </button>
                <button type="button" id="closeModalBtn" class="mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:mt-0 sm:w-auto sm:text-sm">
                    Отмена
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Модальное окно для подтверждения удаления -->

<div id="deleteConfirmModal" class="fixed inset-0 z-50 hidden overflow-y-auto" aria-labelledby="delete-modal-title" role="dialog" aria-modal="true">
    <div class="flex items-center justify-center min-h-screen px-4 py-10 sm:p-0">
        <div class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" aria-hidden="true"></div>
        <div class="bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:max-w-sm sm:w-full">
            <div class="bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
                <div class="sm:flex sm:items-start">
                    <div class="mt-3 text-center sm:mt-0 sm:text-left w-full">
                        <h3 class="text-lg leading-6 font-medium text-gray-900" id="delete-modal-title">
                            Удалить произведение?
                        </h3>
                        <div class="mt-2">
                            <p class="text-sm text-gray-500">
                                Вы уверены, что хотите удалить это произведение? Это действие нельзя отменить.
                            </p>
                        </div>
                    </div>
                </div>
            </div>
            <div class="bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse">
                <button type="button" id="confirmDeleteBtn" class="w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-red-600 text-base font-medium text-white hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 sm:ml-3 sm:w-auto sm:text-sm">
                    Удалить
                </button>
                <button type="button" id="cancelDeleteBtn" class="mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:mt-0 sm:w-auto sm:text-sm">
                    Отмена
                </button>
            </div>
        </div>
    </div>
</div>

<script>
    document.addEventListener("DOMContentLoaded", function () {
    const registerModal = document.getElementById("registerAuthorModal");
    const openModalBtn = document.getElementById("registerAuthorBtn");
    const closeModalBtn = document.getElementById("closeModalBtn");
    const submitBtn = document.getElementById("submitPenNameBtn");
    const penNameInput = document.getElementById("penNameInput");
    const messageBox = document.getElementById("messageBox");
    const messageText = document.getElementById("messageText");
    const deleteConfirmModal = document.getElementById('deleteConfirmModal');
    const confirmDeleteBtn = document.getElementById('confirmDeleteBtn');
    const cancelDeleteBtn = document.getElementById('cancelDeleteBtn');

        let workToDelete = null;

        function showMessage(text, isError = false) {
            messageText.textContent = text;
            messageBox.classList.remove("bg-blue-100", "bg-red-100");
            messageBox.classList.remove("border-blue-400", "border-red-400");
            messageBox.classList.remove("text-blue-700", "text-red-700");

            if (isError) {
                messageBox.classList.add("bg-red-100", "border-red-400", "text-red-700");
            } else {
                messageBox.classList.add("bg-blue-100", "border-blue-400", "text-blue-700");
            }
            messageBox.classList.add("show");
            setTimeout(() => {
                messageBox.classList.remove("show");
            }, 5000);
        }

        function toggleModal(modal, show) {
            modal.classList.toggle("hidden", !show);
        }

        // Event listeners for author registration modal
        if (openModalBtn) {
            openModalBtn.addEventListener("click", () => toggleModal(registerModal, true));
        }
        closeModalBtn.addEventListener("click", () => toggleModal(registerModal, false));
        registerModal.addEventListener("click", (e) => {
            if (e.target.id === "registerAuthorModal") {
                toggleModal(registerModal, false);
            }
        });

        submitBtn.addEventListener("click", async function () {
            const penName = penNameInput.value.trim();
            if (!penName) {
                showMessage("Пожалуйста, введите псевдоним или имя.", true);
                return;
            }

            try {
                const response = await fetch("/MyWorks/RegisterAuthor", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json"
                    },
                    body: JSON.stringify({ penName: penName })
                });

                const result = await response.json();
                if (result.success) {
                    showMessage("Поздравляем, вы стали автором!");
                    window.location.reload();
                } else {
                    showMessage("Ошибка: " + result.message, true);
                }
            } catch (error) {
                console.error("Ошибка: ", error);
                showMessage("Произошла ошибка при регистрации.", true);
            }
        });

        // Event listeners for delete confirmation modal
        document.querySelectorAll('.delete-btn').forEach(button => {
            button.addEventListener('click', (e) => {
                const li = e.target.closest('li');
                workToDelete = {
                    id: li.dataset.workId,
                    type: li.dataset.workType,
                    element: li
                };
                toggleModal(deleteConfirmModal, true);
            });
        });

        cancelDeleteBtn.addEventListener('click', () => {
            toggleModal(deleteConfirmModal, false);
            workToDelete = null;
        });

        deleteConfirmModal.addEventListener('click', (e) => {
            if (e.target.id === 'deleteConfirmModal') {
                toggleModal(deleteConfirmModal, false);
                workToDelete = null;
            }
        });

        confirmDeleteBtn.addEventListener('click', async () => {
            if (!workToDelete) return;

            try {
                   const response = await fetch(`/MyWorks/DeleteWork?id=${workToDelete.id}&type=${workToDelete.type}`, {
        method: 'DELETE',
        headers: {
            'Content-Type': 'application/json'
        }
    });
                if (response.ok) {
                    // Remove the element from the DOM
                    workToDelete.element.remove();
                    showMessage(`Произведение "${workToDelete.type}" успешно удалено.`);
                } else {
                    const error = await response.json();
                    showMessage(`Ошибка при удалении: ${error.message}`, true);
                }
            } catch (error) {
                console.error('Ошибка:', error);
                showMessage('Произошла ошибка при удалении произведения.', true);
            } finally {
                toggleModal(deleteConfirmModal, false);
                workToDelete = null;
            }
        });
    });

</script>